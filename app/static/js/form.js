// Generated by CoffeeScript 1.4.0

/*
#
# Selected is an array of selected funders: [ funder_id1, funder_id2, ... ]
#
*/


(function() {
  var Expectations, Reality, Selected, initExpectations, showQuestions, showRecommendations, toggleSection, updateRecommendations;

  Selected = [];

  /*
  #
  # Expectations is a hash of question ids with values of 
  # an object* that contains which funders want a check
  # and which do not. This object* will be referred to as
  # funder_relations
  #
  # true if funder wants a check on this question
  # false if funder does NOT want a check on this question
  # otherwise funder is not included in object
  # Example:
  # {
  #   question_id1: {
  #     funder_id1: true,
  #     funder_id2: false,
  #     funder_id3: false
  #   },
  #   question_id2: {
  #     funder_id1: true
  #   }
  #   .
  #   .
  # }
  #
  */


  Expectations = {};

  /*
  #
  # Reality is a hash of question ids with values of
  # an object that contains which funder questions have
  # satisfied the expectations.
  # It is essentially the same object as Expectations but checks each
  # expected answer with the checkboxes on the physical DOM
  #
  */


  Reality = {};

  initExpectations = function() {
    return $(".bool-q").each(function(index, el) {
      var expectations, n, question_id, y, _ref;
      question_id = $(el).data("qid");
      expectations = function(type) {
        return $(el).data(type).toString().split(',');
      };
      _ref = [expectations("recsyes"), expectations("recsno")], y = _ref[0], n = _ref[1];
      return Expectations[question_id] = addExpectation(y, n);
    });
  };

  showQuestions = function() {
    var fid, funder_ids, funders;
    funder_ids = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = Selected.length; _i < _len; _i++) {
        fid = Selected[_i];
        _results.push(".funder-q-" + fid);
      }
      return _results;
    })();
    funders = funder_ids.join();
    $(".extra-answer").hide();
    $(funders).fadeIn();
    if (funders.length) {
      return $("#funder-no-q").hide();
    } else {
      return $("#funder-no-q").show();
    }
  };

  showRecommendations = function() {
    var f, funders, label, _i, _len, _results;
    $(".funder-check .checkbox .recommended-label").remove();
    label = $("#recommended-label").html();
    funders = getRecommended(Reality);
    _results = [];
    for (_i = 0, _len = funders.length; _i < _len; _i++) {
      f = funders[_i];
      _results.push($(".funder-check input[data-funderid=" + f + "]").parent().append(label));
    }
    return _results;
  };

  updateRecommendations = function(el) {
    var funder_relations, question_id;
    question_id = $(el).data("qid");
    funder_relations = Expectations[question_id];
    return Reality[question_id] = checkExpectations(el.checked, funder_relations);
  };

  toggleSection = function(e) {
    $(e).parent().siblings(".section-content").toggle();
    return $(e).toggleClass("collapsed");
  };

  $(function() {
    initExpectations();
    $(".funder-checkbox").change(function() {
      var funder_id;
      funder_id = $(this).data("funderid");
      if (!this.checked) {
        Selected = _.without(Selected, funder_id);
      } else if (this.checked && !_.contains(Selected, funder_id)) {
        Selected.push(funder_id);
      }
      return showQuestions();
    });
    $(".bool-q").change(function() {
      updateRecommendations(this);
      return showRecommendations();
    });
    $(".funder-checkbox").each(function(index, el) {
      var funder_id;
      funder_id = $(el).data("funderid");
      if (this.checked) {
        return Selected.push(funder_id);
      }
    });
    showQuestions();
    $(".bool-q").each(function(index, el) {
      return updateRecommendations(el);
    });
    showRecommendations();
    $("#questiontime").timepicker({
      timeFormat: "G:i",
      step: 30,
      scrollDefaultNow: true
    });
    $(".section-toggle").click(function() {
      return toggleSection(this);
    });
    if ($("#followup").length) {
      $(".section-content").hide();
      $(".section-toggle").addClass("collapsed");
      return toggleSection($(".section-toggle")[0]);
    }
  });

}).call(this);
